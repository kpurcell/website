xlab="Year",
ylab="P/D Ratio",
ylim= c(0.05,0.70))
points(cpue.la2$pd ~ cpue.la2$YR, type="p", pch=17)
points(cpue.tx2$pd ~ cpue.tx2$YR, type="p", pch=0)
lines(lowess(cpue.dat2$pd ~ cpue.dat2$YR), lty=1)
lines(lowess(cpue.la2$pd ~ cpue.la2$YR), lty=2)
lines(lowess(cpue.tx2$pd ~ cpue.tx2$YR), lty=4)
#grid(col="black")
#legend("topright", lty=c(1,2,4), pch=c(1,2,3), legend=c("GOM","LA", "TX"))
plot(cpue.dat2$pd ~ cpue.dat2$YR, type="p",
xlab="Year",
ylab="P/D Ratio",
ylim= c(0.05,0.70))
points(cpue.la2$pd ~ cpue.la2$YR, type="p", pch=17)
points(cpue.tx2$pd ~ cpue.tx2$YR, type="p", pch=0)
lines(lowess(cpue.dat2$pd ~ cpue.dat2$YR), lty=1)
lines(lowess(cpue.la2$pd ~ cpue.la2$YR), lty=2)
lines(lowess(cpue.tx2$pd ~ cpue.tx2$YR), lty=4)
#grid(col="black")
#legend("topright", lty=c(1,2,4), pch=c(1,2,3), legend=c("GOM","LA", "TX"))
legend("topright", lty=c(1,2,4), pch=c(1,2,3), legend=c("GOM","LA", "TX"))
legend("topright", lty=c(1,2,4), pch=c(1,17,3), legend=c("GOM","LA", "TX"))
legend("topright", lty=c(1,2,4), pch=c(1,17,3), legend=c("GoM","LA", "TX"))
ylim= c(0.05,0.70))
points(cpue.la2$pd ~ cpue.la2$YR, type="p", pch=17)
plot(cpue.dat2$pd ~ cpue.dat2$YR, type="p",
xlab="Year",
ylab="P/D Ratio",
ylim= c(0.05,0.70))
points(cpue.la2$pd ~ cpue.la2$YR, type="p", pch=17)
points(cpue.tx2$pd ~ cpue.tx2$YR, type="p", pch=0)
lines(lowess(cpue.dat2$pd ~ cpue.dat2$YR), lty=1)
lines(lowess(cpue.la2$pd ~ cpue.la2$YR), lty=2)
lines(lowess(cpue.tx2$pd ~ cpue.tx2$YR), lty=4)
#grid(col="black")
legend("topright", lty=c(1,2,4), pch=c(1,17,3), legend=c("GoM","LA", "TX"))
plot(cpue.dat2$pd ~ cpue.dat2$YR, type="p",
xlab="Year",
ylab="P/D Ratio",
ylim= c(0.05,0.70))
points(cpue.la2$pd ~ cpue.la2$YR, type="p", pch=17)
points(cpue.tx2$pd ~ cpue.tx2$YR, type="p", pch=0)
lines(lowess(cpue.dat2$pd ~ cpue.dat2$YR), lty=1)
lines(lowess(cpue.la2$pd ~ cpue.la2$YR), lty=2)
lines(lowess(cpue.tx2$pd ~ cpue.tx2$YR), lty=4)
#grid(col="black")
legend("topright", lty=c(1,2,4), pch=c(1,17,0), legend=c("GoM","LA", "TX"))
graphics.off()
rm(list=ls(all=TRUE))
library(dplyr)
library(maptools)
library(maps)
library(mapdata)
library(stargazer)
#dat <- read.csv("W://Craig//AerialSurvey//analysis//grid_AS_data_2011.csv")
dat <- read.csv("W://Craig//AerialSurvey//analysis//AS_data_gridv3.csv")
dist <- read.csv("W://Craig//AerialSurvey//analysis//distShorlineData_KC.csv")
names(dat)
#str(dat)
summary(dat)
names(dist)
graphics.off()
rm(list=ls(all=TRUE))
library(dplyr)
library(maptools)
library(maps)
library(mapdata)
library(stargazer)
#dat <- read.csv("W://Craig//AerialSurvey//analysis//grid_AS_data_2011.csv")
dat <- read.csv("W://Craig//AerialSurvey//analysis//AS_data_gridv3.csv")
dist <- read.csv("W://Craig//AerialSurvey//analysis//distShorlineData_KC.csv")
names(dat)
#str(dat)
summary(dat)
names(dist)
summary(dat$FID_1)
stem(dat$FID_1)```
stem(dat$FID_1)
dat$FID_1
length(dat$FID_1)
dat$id <- 1:562
head(dat)
dat <- subset(dat, dat$a_lat>=28.26&dat$a_lat<=29.59)
summary(dat)
summary(dat$a_lat)
agg_pnts <- dplyr::select(dat, id, centroidID, x, y)
agg_pnts$count <- 1
agg.dat <- aggregate(count ~ centroidID + x + y, data=agg_pnts, FUN=length)
agg_pnts <- dplyr::select(dat, id, centroidID, cent_x, cent_y)
agg_pnts$count <- 1
agg.dat <- aggregate(count ~ centroidID + x + y, data=agg_pnts, FUN=length)
agg.dat <- aggregate(count ~ centroidID + cent_x + cent_y, data=agg_pnts, FUN=length)
plot(agg.dat$y ~ agg.dat$x)
map("state",fill=T,col="gray",add=T)
plot(agg.dat$cent_y ~ agg.dat$cent_x)
map("state",fill=T,col="gray",add=T)
summary(agg.dat)
agg.dat <- aggregate(count ~ centroidID + cent_x + cent_y, data=agg_pnts, FUN=sum)
summary(agg.dat)
agg.dat <- aggregate(count ~ centroidID + cent_x + cent_y, data=agg_pnts, FUN=sum)
summary(agg.dat)
agg.dat <- aggregate(count ~ centroidID, data=agg_pnts, FUN=sum)
summary(agg.dat)
agg.dat <- aggregate(count ~ centroidID, data=agg_pnts, FUN=sum, na.rm=T)
summary(agg.dat)
pnts <- read.csv("W://Craig//AerialSurvey//analysis//grid_v3.csv")
graphics.off()
rm(list=ls(all=TRUE))
library(dplyr)
library(maptools)
library(maps)
library(mapdata)
library(stargazer)
#dat <- read.csv("W://Craig//AerialSurvey//analysis//grid_AS_data_2011.csv")
dat <- read.csv("W://Craig//AerialSurvey//analysis//AS_data_gridv3.csv")
dist <- read.csv("W://Craig//AerialSurvey//analysis//distShorlineData_KC.csv")
pnts <- read.csv("W://Craig//AerialSurvey//analysis//grid_v3.csv")
names(dat)
#str(dat)
summary(dat)
summnames(dist)
dat <- subset(dat, dat$a_lat>=28.26&dat$a_lat<=29.59)
graphics.off()
rm(list=ls(all=TRUE))
library(dplyr)
library(maptools)
library(maps)
library(mapdata)
library(stargazer)
#dat <- read.csv("W://Craig//AerialSurvey//analysis//grid_AS_data_2011.csv")
dat <- read.csv("W://Craig//AerialSurvey//analysis//AS_data_gridv3.csv")
dist <- read.csv("W://Craig//AerialSurvey//analysis//distShorlineData_KC.csv")
pnts <- read.csv("W://Craig//AerialSurvey//analysis//grid_v3.csv")
names(dat)
#str(dat)
summary(dat)
names(dist)
summary(pnts)
pnts <- subset(pnts, pnts$a_lat>=28.26&pnts$a_lat<=29.59)
summary(pnts)
#dat <- read.csv("W://Craig//AerialSurvey//analysis//grid_AS_data_2011.csv")
dat <- read.csv("W://Craig//AerialSurvey//analysis//AS_data_gridv3.csv")
dist <- read.csv("W://Craig//AerialSurvey//analysis//distShorlineData_KC.csv")
pnts <- read.csv("W://Craig//AerialSurvey//analysis//grid_v3.csv")
names(dat)
#str(dat)
summary(dat)
names(dist)
summary(pnts)
pnts <- subset(pnts, pnts$cent_>=28.26&pnts$cent_y<=29.59)
summary(pnts)
pnts <- read.csv("W://Craig//AerialSurvey//analysis//grid_v3.csv")
names(dat)
#str(dat)
summary(dat)
names(dist)
summary(pnts)
pnts <- subset(pnts, pnts$cent_y>=28.26&pnts$cent_y<=29.59)
summary(pnts)
names(dat)
names(pnts)
dat <- subset(dat, dat$cent_y>=28.26&dat$cent_y<=29.59)
13*20
15*20
30*20
agg.dat <- merge(pnts, dat, by=c("cent_x", "cent_y"), all.x=T)
?merge
gg_pnts <- dplyr::select(dat, id, centroidID, cent_x, cent_y)
agg_pnts$count <- 1
agg.dat <- aggregate(count ~ centroidID, data=agg_pnts, FUN=sum)
agg_pnts <- dplyr::select(dat, id, centroidID, cent_x, cent_y)
agg_pnts$count <- 1
agg.dat <- aggregate(count ~ centroidID, data=agg_pnts, FUN=sum)
agg_pnts <- dplyr::select(dat, id, centroidID, cent_x, cent_y)
agg_pnts <- dplyr::select(dat, centroidID, cent_x, cent_y)
agg_pnts$count <- 1
agg.dat <- aggregate(count ~ centroidID, data=agg_pnts, FUN=sum)
agg.dat <- merge(agg_pnts, pnts, by=c("cent_x", "cent_y"), all.y=T)
plot(agg.dat$cent_y ~ agg.dat$cent_x)
map("state",fill=T,col="gray",add=T)
summary(agg.dat)
agg.dat[ is.na(agg.dat) ] <- 0
summary(agg.dat)
dat <- merge(dat, dist, by=c("a_lat","a_lon","Identifyin"))
agg_env <- dplyr::select(dat, centroidID, x, y, a_lat, a_lon, Time, oxy, salt, temp, cdom, chloro, dist_shore)
agg.env <- aggregate(cbind(oxy, salt, temp, cdom, chloro, dist_shore) ~ centroidID + x + y, data=agg_env, FUN=mean)
agg.env <- subset(agg.env, agg.env$y > 0)
gam.dat <- merge(agg.dat, agg.env, by=c("centroidID", "x", "y"))
dat <- merge(dat, dist, by=c("a_lat","a_lon","Identifyin"))
agg_env <- dplyr::select(dat, centroidID, cent_x, cent_y, a_lat, a_lon, Time, oxy, salt, temp, cdom, chloro, dist_shore)
agg.env <- aggregate(cbind(oxy, salt, temp, cdom, chloro, dist_shore) ~ centroidID + x + y, data=agg_env, FUN=mean)
agg.env <- subset(agg.env, agg.env$y > 0)
gam.dat <- merge(agg.dat, agg.env, by=c("centroidID", "cent_x", "cent_y"))
dat <- merge(dat, dist, by=c("a_lat","a_lon","Identifyin"))
agg_env <- dplyr::select(dat, centroidID, cent_x, cent_y, a_lat, a_lon, Time, oxy, salt, temp, cdom, chloro, dist_shore)
agg.env <- aggregate(cbind(oxy, salt, temp, cdom, chloro, dist_shore) ~ centroidID + x + y, data=agg_env, FUN=mean)
agg.env <- aggregate(cbind(oxy, salt, temp, cdom, chloro, dist_shore) ~ centroidID + cent_x + cent_y, data=agg_env, FUN=mean)
gam.dat <- merge(agg.dat, agg.env, by=c("centroidID", "cent_x", "cent_y"))
summary(gam.dat)
summary(agg.dat)
summary(dat)
agg_env <- dplyr::select(dat, centroidID, cent_x, cent_y, oxy, salt, temp, cdom, chloro, dist_shore)
agg.env <- aggregate(cbind(oxy, salt, temp, cdom, chloro, dist_shore) ~ centroidID + cent_x + cent_y, data=agg_env, FUN=mean)
summary(agg.env)
gam.dat <- merge(agg.dat, agg.env, by=c("centroidID", "cent_x", "cent_y"), all.x=T)
summary(gam.dat)
gam.dat <- dplyr::select(gam.dat, -(centroidID, id))
gam.dat <- dplyr::select(gam.dat, -centroidID, -id)
summary(gam.dat)
library(mgcv)
gam.dat <- na.omit(gam.dat)
length(gam.dat)
gam.dat
length(gam.dat$dist2shore)
names(gam.dat)
length(gam.dat$dist_shore)
s(chloro) + s(dist_shore), family=poisson, data=gam.dat)
mod.1<-gam(log(count) ~ s(oxy) + s(salt) + s(temp) + s(cdom) +
s(chloro) + s(dist_shore), family=poisson, data=gam.dat)
gam.check(mod.1)
mod.1<-gam(count ~ s(oxy) + s(salt) + s(temp) + s(cdom) +
s(chloro) + s(dist_shore), family=binomial, data=gam.dat)
gam.check(mod.1)
summary(mod.1)
plot.gam(mod.1)
mod.1<-gam(count ~ s(oxy) + s(salt) + s(temp) + s(cdom) +
s(chloro) + s(dist_shore), family=binomial(logit), data=gam.dat)
gam.check(mod.1)
summary(mod.1)
plot.gam(mod.1)
?gam
gam.dat
summary(gam.dat)
gam.dat <- merge(agg.dat, agg.env, by=c("centroidID", "cent_x", "cent_y"), all.x=T)
summary(gam.dat)
gam.dat <- dplyr::select(gam.dat, -centroidID, -id)
summary(gam.dat)
gam.dat <- na.omit(gam.dat)
summary(gam.dat)
gam.dat <- merge(agg.dat, agg.env, by=c("centroidID", "cent_x", "cent_y"), all.x=T)
gam.dat <- dplyr::select(gam.dat, -centroidID, -id)
summary(gam.dat)
gam.dat <- na.omit(gam.dat$oxy)
summary(gam.dat)
gam.dat <- merge(agg.dat, agg.env, by=c("centroidID", "cent_x", "cent_y"), all.x=T)
gam.dat <- dplyr::select(gam.dat, -centroidID, -id)
summary(gam.dat)
mod.1<-gam(count ~ s(oxy) + s(salt) + s(temp) + s(cdom) +
s(chloro) + s(dist_shore), family=binomial(logit), data=gam.dat)
gam.check(mod.1)
summary(mod.1)
summary(gam.dat)
plot.gam(mod.1)
mod.1<-gam(count ~ s(oxy) + s(salt) + s(temp) + s(cdom) +
s(chloro) + s(dist_shore), binomial("logit"), data=gam.dat)
gam.check(mod.1)
summary(mod.1)
plot.gam(mod.1)
names(gam.dat)
summary(gam.dat)
length(gam.dat[gam.dat$count>1,])
length(gam.dat[gam.dat$count<1,])
length(gam.dat[,gam.dat$count<1])
mod.1<-gam(count ~ s(oxy) + s(salt) + s(temp) + s(cdom) +
s(chloro) + s(dist_shore), family=binomial("logit"), data=gam.dat)
gam.check(mod.1)
summary(mod.1)
plot.gam(mod.1)
mod.1<-gam(count ~ s(oxy) + s(dist_shore), family=binomial("logit"), data=gam.dat)
gam.check(mod.1)
summary(mod.1)
plot.gam(mod.1)
summary(gam.dat)
Sys.getenv("PATH")
Sys.getenv("PATH")
library(dismo)
e <- extent(-82,-75,25,36)
rmt <- gmap(e)
plot(rmt, interpolate=T)
library(raster)
x <- raster("C:\\Users\\Kevin.Purcell\\Desktop\\test1.tif")
plot(r, main="Look how easy bitch")
plot(x, main="Look how easy bitch")
plot(rmt, interpolate=T)
dismo::plot(rmt, interpolate=T)
qkMap <- function(x1,x2,y1,y2){
library(dismo)
e <- extent(x1,x2,y1,y2)
rmt <- gmap(e)
plot(rmt, interpolate=T)
}
qkmap(-82,-75,25,36)
qkMap(-82,-75,25,36)
qkMap <- function(W,E,S,N){
library(dismo)
e <- extent(W,E,S,N)
rmt <- gmap(e)
plot(rmt, interpolate=T)
}
qkMap(-82,-75,25,36)
library(devtools)
source_gist("1fc3a99")
source_gist("702861")
source_gist("5bd0227279981e702861")
qkMap(-82,-75,25,36)
qkMap(-88,-75,25,36)
qkMap(-80,-75,35,36)
qkMap(-80,-75,34,35)
qkMap(-77,-75,34.5,35)
qkMap(-77,-76,34.5,35)
dat <- read.table("C:\\Users\\Kevin.Purcell\\Desktop\\nate_dat.csv")
View(dat)
dat <- read.table("C:\\Users\\Kevin.Purcell\\Desktop\\nate_dat.csv", header=T)
View(dat)
library(reshape2)
w.dat <- melt(dat)
View(w.dat)
names(dat)
w.dat <- melt(dat, id="doy")
View(w.dat)
library(ggplot2)
ggplot(w.dat, aes(x=doy, y=value, fill=variable)) + geom_bar(stat= "identity")
p <- ggplot(w.dat, aes(x=doy, y=value, fill=variable))
p + geom_bar(stat= "identity")
p + theme_bw()
p <- ggplot(w.dat, aes(x=doy, y=value, fill=variable))
p + geom_bar(stat= "identity")
p <- ggplot(w.dat, aes(x=doy, y=value, fill=variable))
p + geom_bar(stat= "identity")
p + theme_grey()
p + geom_bar(stat= "identity")
dat <- read.table(text="doy s1 s3 s4 s5 s6 s7 s8
1  0  0 30.0000000 2.2222222 41.1111111  25  10
2  0  0  5.9171598 1.1834320  9.4674556  25  10
3  0  0  0.0000000 0.0000000  0.0000000 0  10
4  0  0  0.0000000 0.0000000  0.0000000 0  10
5  0  0  0.0000000 0.0000000  0.0000000 10  10
6  0  0  0.0000000 0.0000000  0.0000000 10  10
7  0  0  0.0000000 0.0000000  0.0000000 0  10
8  0  0  0.0000000 0.0000000  0.0000000 5  30
", header=T)
library(reshape2)
w.dat <- melt(dat, id="doy")
library(ggplot2)
p <- ggplot(w.dat, aes(x=doy, y=value, fill=variable))
p + geom_bar(stat= "identity")
dat <- read.table(text="doy s1 s3 s4 s5 s6 s7 s8
1  0  0 30.0000000 50 40  25  10
2  0  0  5.9171598 0  10  25  10
3  0  0  0.0000000 0.0000000  5 0  10
4  0  0  0.0000000 0.0000000  5 0  10
5  0  0  0.0000000 0.0000000  5 10  10
6  0  0  0.0000000 0.0000000  5 10  10
7  0  0  0.0000000 0.0000000  10 0  10
8  0  0  0.0000000 50  20 5  30
", header=T)
library(reshape2)
w.dat <- melt(dat, id="doy")
#make stacted plot
library(ggplot2)
p <- ggplot(w.dat, aes(x=doy, y=value, fill=variable))
p + geom_bar(stat= "identity")
install.packages("rworldmap")
data(countryExData)
library(Rworldmap)
library(rworldmap)
library(ggmap)
geocode("Beaufort,NC")
loc <- geocode("Beaufort,NC")
myMap <- get_map(location=loc,
source="stamen",
maptype="terrain",
crop=FALSE)
loc <- geocode("Beaufort,NC")
View(loc)
loc <- "Beaufort, NC"
myMap <- get_map(location=loc,
source="stamen",
maptype="terrain",
crop=FALSE)
ggmap(myMap)
myMap <- get_map(location=loc,
source="stamen",
maptype="toner",
crop=FALSE)
ggmap(myMap)
myMap <- get_map(location=loc,
source="google",
maptype="terrain",
crop=FALSE)
ggmap(myMap)
?rmakdown
?rmarkdown
?melt
library(latticeExtra)
horizonplot(navarra-avRad,
layout=c(1, ncol(navarra)),
origin=0, colorkey=TRUE)
data(airmiles)
plotairmiles, ylab="airmiles", xlab='Year')
plot(airmiles, ylab="airmiles", xlab='Year')
plot(log(airmiles), ylab="Log(airmiles)", xlab='Year')
summary(airmiles)
head(airmiles)
install.packages(c("boot", "devtools", "gplots", "intervals", "jsonlite", "KernSmooth", "maps", "MASS", "mime", "pdfetch", "Rcpp", "rgdal", "rgeos", "rmarkdown", "shiny"))
install.packages("fortunes")
fortunes::fortune(1)
fortunes::fortune(22)
fortunes::fortune(104)
fortunes.data
fortune.data
fortunes.data
library(fortunes)
data(fortunes)
data(fortune)
data(fortunes.data)
library(twitteR)
install.packages("twitteR")
library(twitteR)
n<- length(rdmTweets)
rdmTweets <- userTimeline("kevin_purcell", n=100)
setup_twitter_oauth("yAqBhP6RSfRunXDoO4ee25QWG","c88D4aeHiq3qmdiQNNZhwywZlCFU15vREnDaoU3qXsplxgAlTT")
library(twitteR)
setup_twitter_oauth("yAqBhP6RSfRunXDoO4ee25QWG","c88D4aeHiq3qmdiQNNZhwywZlCFU15vREnDaoU3qXsplxgAlTT")
reqURL <- "https://api.twitter.com/oauth/request_token"
accessURL <- "http://api.twitter.com/oauth/access_token"
authURL <- "http://api.twitter.com/oauth/authorize"
consumerKey <- "yAqBhP6RSfRunXDoO4ee25QWG"
consumerSecret <- "c88D4aeHiq3qmdiQNNZhwywZlCFU15vREnDaoU3qXsplxgAlTT"
twitCred <- OAuthFactory$new(consumerKey=consumerKey,
consumerSecret=consumerSecret,
requestURL=reqURL,
accessURL=accessURL,
authURL=authURL)
registerTwitterOAuth(twitCred)
twitCred$handshake()
registerTwitterOAuth(twitCred)
consumerKey <- "yAqBhP6RSfRunXDoO4ee25QWG"
consumerSecret <- "c88D4aeHiq3qmdiQNNZhwywZlCFU15vREnDaoU3qXsplxgAlTT"
twitCred <- OAuthFactory$new(consumerKey=consumerKey,
consumerSecret=consumerSecret)
twitCred$handshake()
library(twitteR)
kp <- getUser('kevin_purcell')
setup_twitter_oauth("yAqBhP6RSfRunXDoO4ee25QWG","c88D4aeHiq3qmdiQNNZhwywZlCFU15vREnDaoU3qXsplxgAlTT")
library(devtools)
devtools::install_github("hadley/httr")
require(twitteR)
searchTerm='kevin-purcell'
#Grab the tweets
rdmTweets <- searchTwitter(searchTerm, n=500)
install.packages(c("data.table", "devtools", "googleVis", "knitr", "minqa", "multcomp", "nlme", "R.utils"))
getTwitterOAuth(yAqBhP6RSfRunXDoO4ee25QWG, c88D4aeHiq3qmdiQNNZhwywZlCFU15vREnDaoU3qXsplxgAlTT)
registerTwitterOAuth(oauth)
getTwitterOAuth("yAqBhP6RSfRunXDoO4ee25QWG", "c88D4aeHiq3qmdiQNNZhwywZlCFU15vREnDaoU3qXsplxgAlTT")
registerTwitterOAuth(oauth)
library("rMaps", lib.loc="~/R/R-3.0.2/library")
### Data gathering script for Shrimp ELB Analysis
# updated: 2013-11-7
library(foreign)
library(lattice)
#import new dbf file from spatial join off polygon 2 points
#this data attaches centroid locations for 10x10 min grid cells with all
#6-8 elb data falling within those polygons
elb.2mo.dat<-read.dbf(file="C:/Users/kevin.purcell/Documents/NOAA_SpatialEffort_MS/mapping_2013-3-5/poly2point_2mo_sz.dbf", as.is = FALSE)
elb.2mo.dat<-subset(elb.2mo.dat, elb.2mo.dat$depth<=100)
#remove data points where centroid data is missing
elb.2mo.dat<- subset(elb.2mo.dat, elb.2mo.dat$cent_lon!=0)
elb.2mo.dat<- subset(elb.2mo.dat, elb.2mo.dat$ZONE!=0)
#rename some columns in the new dataset
colnames(elb.2mo.dat)[12]<-'grid_cell'
colnames(elb.2mo.dat)[3]<-'vesselID'
colnames(elb.2mo.dat)[10]<-'depth'
colnames(elb.2mo.dat)[17]<-'sz'
elb.2mo.dat$FID_1<-NULL
elb.2mo.dat$FID_3<-NULL
elb.2mo.dat$FID_1_1<-NULL
elb.2mo.dat$Id<-NULL
elb.2mo.dat$DATE<-paste(elb.2mo.dat$yr, elb.2mo.dat$mon, sep="-")
elb.2mo.dat$DATE<-paste(elb.2mo.dat$DATE, elb.2mo.dat$day, sep="-")
#elb.2mo.dat$DATE <- as.POSIXlt(elb.2mo.dat$DATE)
elb.2mo.dat$CW <- strftime(elb.2mo.dat$DATE,format="%W")
elb.2mo.dat$jd <- strftime(elb.2mo.dat$DATE, format="%j")
elb.2mo.dat$CW<-as.numeric(elb.2mo.dat$CW)
elb.2mo.dat$jd<-as.numeric(elb.2mo.dat$jd)
load("~/Shrimp_Project2/SHRCOMDATA/GSS_merge.RData")
head(complete.dat)
length(unique(complete.dat$VESSEL))
library(dplyr)
?dplyr
elb_study_data <- filter(complete.dat, YEARU==2005:2010)
elb_study_data <- filter(complete.dat, YEARU>=2005, YEARU<=2010)
vessels <- filter(complete.dat, YEARU>=2005, YEARU<=2010) %>%
distinct(select(,VESSEL)
)
vessels <- unique(elb_study_data$vessel)
head(elb_study_data)
vessels <- unique(elb_study_data$VESSEL)
length(vessels)
length(unique(vessels))
source('~/.active-rstudio-document', echo=TRUE)
install.packages(c("devtools", "dplyr", "tidyr", "ggplot2", "lattice", "latticeExtra", "vegan", "raster", "rasterVis"))
install.packages("rmarkdown")
install.packages("devtools")
x <- Sys.Date()
x
setwd("~/GitHub/website")
library(Rmarkdown)
library(rmarkdown)
render(index.md)
render("index.md")
